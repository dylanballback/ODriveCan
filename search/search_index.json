{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ODriveCan","text":"<p>ODrive Can Python Package.</p>"},{"location":"#examples","title":"Examples","text":""},{"location":"#one-odrive","title":"One ODrive:","text":"one_drive.py<pre><code>import pyodrivecan\nimport asyncio\n\nasync def controller(odrive):\n        odrive.set_torque(0.1)  #Set torque to 0.1 Nm \n        await asyncio.sleep(15) # Need this line in order for the async functions to work. \n        odrive.set_torque(0)    # Set torque to 0 Nm\n\n        # Set running flag to False to stop collecting and storing O-Drive to database.\n        odrive.running = False  \n\n\nif __name__ == \"__main__\":\n    # Create ODriveCAN object with a node_id = 0 \n    odrive = pyodrivecan.ODriveCAN(0)\n\n    # Initialize the odrive object \n    odrive.initCanBus()\n\n    #Set O-Drive to torque control\n    odrive.set_controller_mode(\"torque_control\")\n\n    # This will use the run method to pass in the async controller function\n    #and automatically run the odrive \n    odrive.run(controller(odrive))\n</code></pre>"},{"location":"#result","title":"Result","text":"<p>A video might be good to add here.</p> <p> </p>"},{"location":"#two-odrives","title":"Two ODrives:","text":"<pre><code>import pyodrivecan\nimport asyncio\nfrom datetime import datetime, timedelta\n\n\n#Functions to clamp a variables upper and lower limit.        \ndef clamp(x, lower, upper):\n    return lower if x &lt; lower else upper if x &gt; upper else x\n\n\n#Example of how you can create a controller to get data from the O-Drives and then send motor comands based on that data.\nasync def controller(odrive1, odrive2):\n        #Set both O-Drives Torque to 0 Nm\n        odrive1.set_torque(0) \n        odrive2.set_torque(0)\n\n        #Run for set time delay example runs for 15 seconds.\n        stop_at = datetime.now() + timedelta(seconds=15)\n        while datetime.now() &lt; stop_at:\n            await asyncio.sleep(0) #Need this for async to work.\n\n            x1 = await odrive1.get_velocity() - 9.5 \n            #print(x1)\n            clamp(x1, 0, 0.1) #Currently my motor is limited to 0 - 0.1 Nm\n            odrive1.set_torque(x1)\n\n            x2 = await odrive2.get_velocity() - 9.5\n            #print(x2)\n            clamp(x2, 0, 0.1) #Currently my motor is limited to 0 - 0.1 Nm\n            odrive2.set_torque(x2)\n            print(x1, x2)\n\n        # Set both O-Drives Torque to 0 Nm\n        odrive1.set_torque(0) \n        odrive2.set_torque(0)\n\n        # Set running flag to False to stop collecting and storing O-Drive to database.\n        odrive1.running = False\n        odrive2.running = False\n\n\n\n# Run multiple O-Drives Instances:\nasync def main():\n    #Set up Node_ID 0\n    odrive1 = pyodrivecan.ODriveCAN(0)\n    odrive1.initCanBus()\n\n    #Set up Node_ID 1 \n    odrive2 = pyodrivecan.ODriveCAN(1)\n    odrive2.initCanBus()\n\n    #Set up Node_ID 2 \n    #odrive3 = ODriveCAN(2)\n    #odrive3.initCanBus()\n\n    #Add each odrive to the async loop so they each will collect and store O-Drive data into the database concurrently.\n    #Add the defined async controller function to also run concurrently with both odrive loops. \n    await asyncio.gather(\n        odrive1.loop(),\n        odrive2.loop(),\n        #odrive3.loop(),\n        controller(odrive1, odrive2) \n    )\n\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"#result_1","title":"Result","text":"<p>A video might be good to add here.</p>"},{"location":"database/database/","title":"Database","text":"<p>Let create a custom user defined table and add data to it.</p>"},{"location":"database/database/#example","title":"Example","text":"<p>This is an example of how to create your own table inside the database to store custom data. In this example I am creating a new table called <code>pid_parameters</code> and adding the columns <code>kp</code>, <code>ki</code>, <code>kd</code>, and <code>remarks</code>. I will be using this table to keep track of my PID constants set for each trial along with any additional comments/remarks I want to add. </p> <p>The <code>trial_id</code> will automatically be added to the table as a foreign key to link this data to its corresoponding data in the <code>ODriveData</code> table. </p> <pre><code>import pyodrivecan\n\ndatabase = pyodrivecan.OdriveDatabase('odrive_database.db')\n\n# Define the table name\ntable_name = \"pid_parameters\"\n\n# Define columns and SQL datatypes for the new table\ncolumns = [\n    (\"kp\", \"REAL\"),\n    (\"ki\", \"REAL\"),\n    (\"kd\", \"REAL\"),\n    (\"remarks\", \"TEXT\")\n]\n\n# Create the table\ndatabase.create_user_defined_table(table_name, columns)\n\n# Define the existing columns, and values for the new record\ncolumns = [\"trial_id\", \"kp\", \"ki\", \"kd\", \"remarks\", ]\n\n# Ensure trial_id 1 exists in ODriveData\nvalues = [1, 0.5, 0.00, 0.01, \"Initial test parameters\"]  \n\n# Insert the data from the 'values' list above.\ndatabase.insert_into_user_defined_table(table_name, columns, values)\n</code></pre>"},{"location":"database/database/#results","title":"Results","text":"<p>As you can see in the image above, the package will automatically handle setting up the  trial_id as your foriegn key to link the data between the ODriveData table and your custom user defined table. </p>"},{"location":"setup/canhat/setup/","title":"Raspberry Pi with CAN Hat","text":"<p>This page I will go through the components that I am currently using for my examples and how to set them up.</p> <p>Info</p> <p>The WaveShare RS485 CAN HAT is required to control an O-Drive S1/Pro using CAN Bus with a Raspberry Pi.</p> <p>It is compatible with Raspberry Pi 4B/3B+/3B/2B/B+/A+/Zero/Zero W/WH/Zero 2W Series Boards. I am using a Raspberry Pi 2 Zero W but you can use any of the Pi models listed above.</p>"},{"location":"setup/canhat/setup/#setup-steps","title":"Setup steps:","text":"If you have not yet flashed your Pi OS Click Here. <ol> <li>Install Raspberry Pi Imager </li> <li>Open up Raspberry Pi Imager and Allow it to make changes on your device </li> <li>Select Pi Model, Pi OS, and micro SD Card </li> <li>Select Edit Settings </li> <li>Enter username, password, Wi-Fi credentials, time zone, keyboard layout. </li> <li>Enable SSH </li> <li>Save and Confirm to write OS  </li> <li>Confirm successful, remove from computer and plug into Pi </li> </ol> How to ssh into Pi <p>Make sure that your pi and device are on the same Wi-Fi network to be able to SSH.</p> <p>If you are on windows you need to install a software to be able to SSH. 1. Install PuTTY if you have not already and are using windows.  2. Enter Pi <code>username@hostname.local</code> like this <code>dylan@raspberrypi.local</code> and select open.  </p> If the host name doesn't work here is how you can get the IP Address of the Pi. <p>A. Find the Pi's IP address you will need to connect to a monitor and enter in this command to its terminal: <pre><code>ifconfig\n</code></pre>  B. Open Putty and type Pi username @ the IP address like this <code>dylan@192.168.1.17</code> and select Open: </p> <ol> <li> <p>If first time opening Putty you will have to Accept a prompt to connect: </p> </li> <li> <p>Then enter your Pi user's password: </p> </li> <li> <p>Ready to continue to the tutorial below: </p> </li> </ol>"},{"location":"setup/canhat/setup/#1-setup-can-hat","title":"1. Setup CAN hat","text":"<p>Once the Raspberry Pi has the Pi OS on it and the CAN Hat should be installed. It should look something like this:</p>"},{"location":"setup/canhat/setup/#2-edit-configtxt-file","title":"2. Edit <code>config.txt</code> file","text":"<p>Open terminal and edit the config file to allow for the Pi to talk to the CAN Hat: <pre><code>sudo nano /boot/config.txt\n</code></pre></p> <p>Uncomment <code>#dtparam=spi=on</code> and  add the following line below it: <pre><code>dtparam=spi=on\n\ndtoverlay=mcp2515-can0,oscillator=12000000,interrupt=25,spimaxfrequency=2000000\n</code></pre></p> <p>Example</p> <p></p>"},{"location":"setup/canhat/setup/#3-update-raspberry-pi","title":"3. Update raspberry pi","text":"<p>Ensure your Pi is all up to date: <pre><code>sudo apt-get update\n</code></pre></p>"},{"location":"setup/canhat/setup/#4-install-can-utils-dependency","title":"4. Install <code>can-utils</code> dependency","text":"<pre><code>sudo apt-get install can-utils\n</code></pre>"},{"location":"setup/canhat/setup/#5-upgrade-raspberry-pi","title":"5. Upgrade raspberry pi","text":"<pre><code>sudo apt-get upgrade\n</code></pre>"},{"location":"setup/canhat/setup/#6-reboot-pi","title":"6. Reboot pi","text":"<p>Once both those have completed we need to reboot the Pi for the edits in the <code>config.txt</code> file to work: <pre><code>sudo reboot\n</code></pre></p>"},{"location":"setup/canhat/setup/#5-check","title":"5. Check","text":"<p>Check if the <code>config.txt</code> file is correct/after your Pi has restarted. You can use the following command to check if the <code>config.txt</code> file is correct: <pre><code>dmesg | grep -i '\\(can\\|spi\\)'\n</code></pre></p> <p>Success</p> <p></p>"},{"location":"setup/canhat/setup/#6-install-can-python-package-dependencies","title":"6. Install CAN Python package dependencies","text":"<p>Now we need to install some Python packages for the CAN Communication to work on the Pi:</p> <p>Then we will need to pip install <code>python-can</code>: <pre><code>pip3 install python-can\n</code></pre></p> <p>Finally, install the <code>pyodrivecan</code> package: <pre><code>pip3 install pyodrivecan\n</code></pre></p> pip3 not found <p>If you get an error and don't have pip run the following command to install it. <pre><code>sudo apt-get install python3-pip\n</code></pre> Then re-run pip install python-can command. <pre><code>pip3 install python-can\n</code></pre> </p> WARNING: not on PATH <p>If you get this warning after you pip3 install python-can, run this command to fix: <pre><code>echo 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc\n</code></pre> </p>"},{"location":"setup/canhat/setup/#result","title":"Result","text":"<p>Congratulations you have successfully set up your Pi with its CAN Hat</p> <p>Now move forward to configure your O-Drive for CAN Bus Control with the pyodrivecan package!</p> <p>Next page</p>"},{"location":"setup/canhat/setup/#sources","title":"Sources","text":"<p>Source O-Drive Docs / WaveShare Wiki</p> <p>I would like to thank WaveShare for their documentation and tutorial on how to set this up: WaveShare CAN Hat Wiki</p> <p>Along with the official O-Drive Documentation also reiterates how to set up the WaveShare RS485 CAN HAT: Official O-Drive CAN Guide</p> <p>You have to scroll down on the O-Drive Documentation Page to \"Enable CAN Hat\", then select the \"RS4855 / CAN Hat\" tab to see instructions on setup. </p>"},{"location":"setup/odrive/setup/","title":"ODriveCan","text":"<p>This is a tutorial page on how to configure your O-Drive S1 or Pro in order to use this package. If this is your first time using your O-Drive, I strongly recommend to see the O-Drive Documentation and start with their tutorial and using the web GUI to get your motor spinning for the first time.</p> <p>In this example I will be using a Raspberry Pi 2 Zero W with the WaveShare RS485 CAN HAT.</p> <p>Tip</p> <p>If you have not already set up your Raspberry Pi with the WaveShare RS485 CAN HAT, please visit this page: Raspberry Pi CAN Hat Setup</p>"},{"location":"setup/odrive/setup/#o-drive-gui-configuration","title":"O-Drive GUI configuration","text":"O-Drive Firmware &gt;= v0.6.9 to use the pyodrivecan package. <p>You can check your O-Drive Firmware when connected to the GUI on the bottom left corner: </p>"},{"location":"setup/odrive/setup/#1-power-source","title":"1. Power source","text":""},{"location":"setup/odrive/setup/#2-motor","title":"2. Motor","text":""},{"location":"setup/odrive/setup/#3-encoder","title":"3. Encoder","text":""},{"location":"setup/odrive/setup/#4-control-mode","title":"4. Control mode","text":""},{"location":"setup/odrive/setup/#5-interfaces","title":"5. Interfaces","text":""},{"location":"setup/odrive/setup/#6-apply-and-calibrate","title":"6. Apply and calibrate","text":"If you have your O-Drive powered by a power supply/battery and want to plug in the USB, you need to have a USB Isolator. <p>Success</p> <p></p>"},{"location":"setup/odrive/setup/#7-powers-message-rate","title":"7. Powers message rate","text":"<p>Set <code>powers_msg_rate_ms</code> in Inspector Tab </p>"},{"location":"setup/odrive/setup/#congratulations","title":"Congratulations","text":"<p>Success</p> <p></p>"}]}